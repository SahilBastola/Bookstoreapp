// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/order.dart';
import 'model/product.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1491670695603788585),
      name: 'User',
      lastPropertyId: const IdUid(19, 1515896324655881013),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(14, 1236553508751267811),
            name: 'uId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(15, 832094664773108848),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 7285353087104310662)),
        ModelProperty(
            id: const IdUid(16, 4645695001775332241),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 5781137115421092983),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2890662658330059542),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1515896324655881013),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4529068213013234172),
      name: 'Product',
      lastPropertyId: const IdUid(7, 5662034683934310190),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 359888728186722027),
            name: 'pId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 178346021848631014),
            name: 'productid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 470246725378619267)),
        ModelProperty(
            id: const IdUid(3, 7307280979392125035),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5498437801413004551),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3035235840727949754),
            name: 'img',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4896022048082204939),
            name: 'Author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5662034683934310190),
            name: 'price',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 3511621194530610548),
      name: 'Orders',
      lastPropertyId: const IdUid(2, 8262644699647599324),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2988697311455185376),
            name: 'oid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8262644699647599324),
            name: 'orderid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 3872377026440038560))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 3511621194530610548),
      lastIndexId: const IdUid(7, 3872377026440038560),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6737063621621395239, 3709371363935871564],
      retiredIndexUids: const [5881540260768974504, 4385654408340404304],
      retiredPropertyUids: const [
        3494832910677109225,
        8408011040589617928,
        5227828378864606417,
        1220580055973064459,
        6051426899875581118,
        2190432477197126795,
        6824953002688932020,
        5183476073191611898,
        2961215476205113723,
        6283213877953178712,
        7151277210202090871,
        4109541979368169780,
        4525591113068182109,
        1535035627599720817,
        1921103150792995739,
        5263910712048862822,
        6433552041912746501,
        3513031525804640758,
        8968894469264433522,
        2568664745706321316,
        5149999832365602365,
        6413363444691001797
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.uId,
        setId: (User object, int id) {
          object.uId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(20);
          fbb.addInt64(13, object.uId);
          fbb.addOffset(14, userIdOffset);
          fbb.addOffset(15, emailOffset);
          fbb.addOffset(16, nameOffset);
          fbb.addOffset(17, passwordOffset);
          fbb.addOffset(18, imageOffset);
          fbb.finish(fbb.endTable());
          return object.uId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 38),
              uId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0))
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 40);

          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[1],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.pId,
        setId: (Product object, int id) {
          object.pId = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final productidOffset = object.productid == null
              ? null
              : fbb.writeString(object.productid!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descOffset =
              object.desc == null ? null : fbb.writeString(object.desc!);
          final imgOffset =
              object.img == null ? null : fbb.writeString(object.img!);
          final AuthorOffset =
              object.Author == null ? null : fbb.writeString(object.Author!);
          fbb.startTable(8);
          fbb.addInt64(0, object.pId);
          fbb.addOffset(1, productidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descOffset);
          fbb.addOffset(4, imgOffset);
          fbb.addOffset(5, AuthorOffset);
          fbb.addInt64(6, object.price);
          fbb.finish(fbb.endTable());
          return object.pId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              img: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              Author: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              productid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              pId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Orders: EntityDefinition<Orders>(
        model: _entities[2],
        toOneRelations: (Orders object) => [],
        toManyRelations: (Orders object) => {},
        getId: (Orders object) => object.oid,
        setId: (Orders object, int id) {
          object.oid = id;
        },
        objectToFB: (Orders object, fb.Builder fbb) {
          final orderidOffset =
              object.orderid == null ? null : fbb.writeString(object.orderid!);
          fbb.startTable(3);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, orderidOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Orders(
              orderid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.uId]
  static final uId = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[0].properties[5]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.pId]
  static final pId = QueryIntegerProperty<Product>(_entities[1].properties[0]);

  /// see [Product.productid]
  static final productid =
      QueryStringProperty<Product>(_entities[1].properties[1]);

  /// see [Product.title]
  static final title = QueryStringProperty<Product>(_entities[1].properties[2]);

  /// see [Product.desc]
  static final desc = QueryStringProperty<Product>(_entities[1].properties[3]);

  /// see [Product.img]
  static final img = QueryStringProperty<Product>(_entities[1].properties[4]);

  /// see [Product.Author]
  static final Author =
      QueryStringProperty<Product>(_entities[1].properties[5]);

  /// see [Product.price]
  static final price =
      QueryIntegerProperty<Product>(_entities[1].properties[6]);
}

/// [Orders] entity fields to define ObjectBox queries.
class Orders_ {
  /// see [Orders.oid]
  static final oid = QueryIntegerProperty<Orders>(_entities[2].properties[0]);

  /// see [Orders.orderid]
  static final orderid =
      QueryStringProperty<Orders>(_entities[2].properties[1]);
}
